####step1. mpg를 dataframe으로 변경####
####step2. mpg의 정보를 출력####
#행의 갯수, 열의 갯수, 위에서 10개, 끝에서 10개 출력력
####step1. mpg를 dataframe으로 변경####
install.packages("ggplot2")
install.packages("ggplot2")
####step1. mpg를 dataframe으로 변경####
mpg <- data.frame(mpg)
mpg
class(mpg)
nrow(mpg)
ncol(mpg)
head(mpg, n=10)
tail(mpg, n=10)
mpg <- rename(mpg, cty = city )
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dylyr)
source('C:/iot/work/RWork/advanced/exam.R', encoding = 'UTF-8', echo=TRUE)
install.packages("dplyr")
mpg
mpg <- rename(mpg, city = cty)
mpg <- rename(mpg,city=cty)
####step1. mpg를 dataframe으로 변경####
mpg <- as.data.frame(mpg)
nrow(mpg)
remove.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
mpg <- rename(mpg,city=cty)
mpg <- rename(mpg,highway=hwy)
mpg
mpg
mpg$total <-(mpg$city+mpg$highway)
mpg$total <-as.numeric(mpg$city+mpg$highway)
mpg$av <- as.numeric(mpg$total/2)
mpg
mpg
mpg
head(mpg)
write.csv(mpg,file="mpg_result.csv")
head(mpg)
sample(1:10)
a <- sample(1:10)
source('~/.active-rstudio-document', echo=TRUE)
a <- sample(1:10, size=5)
a
a <- sample(1:10, size=5)
a
b <- sample(1:10, size=5, replace=FALSE)
b
b
b
(1:10, size=5, replace=FALSE)
(1:10, size=5, replace=FALSE)
(1:10, size=5, replace=FALSE)
b <- sample(1:10, size=5, replace=FALSE)
b
b <- sample(1:10, size=5, replace=FALSE)
b
c <-sample(1:10, size=5, replace=TRUE)
c
c <-sample(1:10, size=5, replace=TRUE)
c
c <-sample(1:10, size=5, replace=TRUE)
c
c <-sample(1:10, size=5, replace=TRUE)
c
b <- sample(1:10, size=5, replace=FALSE)
b
b <- sample(1:10, size=5, replace=FALSE)
b
set.seed(1222) #1222는 key
a <- sample(1:10, size=5, replace=FALSE)
a
a <- sample(1:10, size=5, replace=FALSE)
a
set.seed(1222) #1222는 key
a <- sample(1:10, size=5, replace=FALSE)
a
a
set.seed(1222) #1222는 key
set.seed(121) #1222는 key
a <- sample(1:10, size=5, replace=FALSE)
a
set.seed(1222) #1222는 key
a
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata","android"),
size=6,
replace=TRUE))
ifdf
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata"),
size=6,
replace=TRUE))
ifdf
#myval의 값이 spring이면 프로젝트 완료 츌력, bigdata이면 할꺼야
for(i in 1:nrow(ifdf)){
if(ifdf[i,"myval"] == "spring"){
ifdf[i,"info"] <-"프로젝트 완료"
}else{
ifdf[i,"info"] <-"할꺼야"
}
}
ifdf
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring",
yes = "쉽다",
no = "할꺼다")
ifdf
#if문의 역할을 하는 함수 - ifelse
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata","android"),
size=6,
replace=TRUE))
ifdf
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring",
yes = "쉽다",
no = ifelse(test=ifdf$myval=="bigdata",
yes="머신세팅",
no="device세팅완료"))
ifdf
#if문의 역할을 하는 함수 - ifelse
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata","android"),
size=6,
replace=TRUE))
ifdf
#myval의 값이 spring이면 프로젝트 완료 츌력, bigdata이면 할꺼야
for(i in 1:nrow(ifdf)){
if(ifdf[i,"myval"] == "spring"){
ifdf[i,"info"] <-"프로젝트 완료"
}else{
ifdf[i,"info"] <-"할꺼야"
}
}
ifdf
#함수를 이용해서 -info2
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring",
yes = "쉽다",
no = "할꺼다")
ifdf
#조건이 두 개 이상인 경우 처리
ifdf[,"info3"] <- ifelse(test = ifdf$myval=="spring",
yes = "쉽다",
no = ifelse(test=ifdf$myval=="bigdata",
yes="머신세팅",
no="device세팅완료"))
ifdf
ifdf[,"info4"] <- "쉽다"
ifdf
str(mpg)write.csv(mpg,file="mpg_result.csv")
str(mpg)write.csv(mpg,file="mpg_result.csv")
str(mpg)
mpg[,"info"] <- ifelse(test=mpg$total>=20,
yes="pass",
no="fail")
mpg
mpg[,"info"] <- ifelse(test=mpg$total>=20,
yes="pass",
no="fail")
mpg
mpg[,"info"] <- ifelse(test=mpg$total>=30,
yes="pass",
no="fail")
mpg
mpg[,"grade"] <- "D"
mpg
mpg$grade <- ifelse(test=mpg$total>=40,
yes="A",
no=ifelse(test=mpg$total>=35,
yes="B",
no=ifelse(test=mpg$total>=30,
yes="C")))
mpg
mpg[,"grade"] <- ifelse(test=mpg$total>=40,
yes="A",
no=ifelse(test=mpg$total>=35,
yes="B",
no=ifelse(test=mpg$total>=30,
yes="C")))
mpg
mpg[,"grade"] <- ifelse(test=mpg$total>=40,
yes="A",
no=ifelse(test=mpg$total>=35,
yes="B",
no=ifelse(test=mpg$total>=30,
yes="C",
no="D")))
mpg
table(exam$eng)
qplot(exam$eng)
qplot(exam$eng)
library("ggplot")
library("ggplot2")
qplot(exam$eng)
class(num1)
num1 = 10
class(num1)
num2 = 10L
class(num2)
num1 <- 10
class(num1)
num2 <- 10L
class(num2)
result <- num1 + num2
class(result)
data(package="MASS")#R내부의 샘플데이터넷을 가져오기
library(MASS)
data(Boston)
head(Boston)
colnames(Boston)
t(colnames(Boston))
t(t(colnames(Boston)))
df <- head(Boston[,1:7])
df
#반복작업을 할 때 사용할 수 있도록 함수를 지원
#margin:1 => 행방향, 2:열방향
df[,"total"] <- apply(x=df, MARGIN=1, FUN="sum")
#반복작업을 할 때 사용할 수 있도록 함수를 지원
#margin:1 => 행방향, 2:열방향
df[,"total"] <- apply(X=df, MARGIN=1, FUN="sum")
df
df[,"avg"] <- apply(X=df,MARGIN=1,FUN="mean")
df
apply(X=df,MARGIN=2,FUN="sum")
apply(X=df,MARGIN=2,FUN="mean")
round(apply(X=df,MARGIN=2,FUN="sum"),4)
round(apply(X=df,MARGIN=2,FUN="mean"),4)
sapply(X=df,FUN="mean")
t(t(sapply(X=df,FUN="class")))
library("dplyr")
# dplyr은 문자열 관련 작업에 특화된 기능이 많은 패키지
# c++로 구현되어 있어 가장 빠르다.
# dplyr 라이브러리는 실행할 때 코드 전체를 범위지정해서 실행
# 한줄한줄 실행하면, 이전 문장이 실행이 덜 된 상태에서 다음 문장을 실행하게 되면 제대로 작동하지 않을 수 있다.
library("dplyr")
data("airquality")
head("airquality")
data("airquality")
head(airquality)
df2 <- airquality
df2
#필터링 - 벡터연산
head(df2[,1:4])
df2_data1 <- df2[1:5,]
df2_data1
df2[df2$Day==1,]
df2$Day==1
df2[df2$Day!=1,]
df2[df2$Day==1,]
df2[df2$Day!=1,]
df2[df2$Day<=2,]
df2$Day %in% 1:2
df2[df2$Day==1,]
df2[df2$Day!=1,]
df2[df2$Day<=2,]
df2[df2$Day==1 & df2$Day==2,]
df2[df2$Day==1 | df2$Day==2,]
sum(df2$Day %in% 1:2) #Day가 1이거나 2인 것들의 개수를 구하기
df2_data2 = df2[df2$Day %in% 1:2,]
nrow(df2_data2)
#dplyr패키지에서 지원하는 필터관련 함수
filter(df2,Day ==1 & Month==5)
filter(df2,Day %in$ c(1,3,5))
filter(df2,Day %in% c(1,3,5))
exam <- read.csv("csv_exam.csv")
head(exam)
exam %>% filter(class==1)
exam %>% filter(class==1) %>%
filter(math>=50)
# select
exam %>% select(-math) #math컬럼만 빼고 보겠다는 뜻
# arrange
exam %>%arranage(id)
# arrange
exam %>%arrange(id)
exam %>% arrange(desc(id))
source('C:/iot/work/RWork/advanced/Filter.R', encoding = 'UTF-8', echo=TRUE)
source('C:/iot/work/RWork/advanced/Filter.R', encoding = 'UTF-8', echo=TRUE)
exam %>%
filter(class==1) %>%
select(id,math,science)
exam %>% arrange(class,desc(english))
#mutate - 파생변수 추가하기 (원본에 없는 컬럼 추가)
exam %>%mutate(total =math+english+science) %>%
head()
source('C:/iot/work/RWork/advanced/Filter.R', encoding = 'UTF-8', echo=TRUE)
#mutate - 파생변수 추가하기 (원본에 없는 컬럼 추가)
exam %>%mutate(total =math+english+science,
mean = total/3,
info = ifelse(science >=70,"통과","재시험"))
#group by : 묶어주기. summarise는 집계함수이다.
# 그룹으로 묶고 난 후, 집계
exam %>%
group_by(class) %>%
summarise(math_sum = sum(math),
math_mean = mean(math),
math_median = median(math),
math_count = n() )
test1 <- data.frame(id=c(1,2,3,4,5),
mid_jumsu=c(77,56,99,100,99))
test2 <- data.frame(id=c(1,2,3,4,5),
final_jumsu=c(77,56,99,100,99))
test1
test2
final_data <- left_join(test1,test2,by="id")
final_data
namedata <- data.frame(class=c(1,2,3,4,5),
teacher=c(kim))
namedata <- data.frame(class=c(1,2,3,4,5),
teacher=c("kim","lee","park","jang","hong"))
str(namedata)
namedata <- data.frame(class=c(1,2,3,4,5),
teacher=c("kim","lee","park","jang","hong"),
stringsAsFactors = F)
str(namedata)
exam_new <- left_join(exam,namedata,by="class")
exam_new
group_total <- bind_rows(groupA,groupB)
group_total
groupA <-data.frame(id=c(1,2,3,4,5),
mid_jumsu=c(77,56,99,100,99))
groupB <- data.frame(id=c(6,7,8,9,10),
final_jumsu=c(77,56,99,100,99))
group_total <- bind_rows(groupA,groupB)
group_total
groupA <-data.frame(id=c(1,2,3,4,5),
mid_jumsu=c(77,56,99,100,99))
groupB <- data.frame(id=c(6,7,8,9,10),
final_jumsu=c(77,56,99,100,99))
group_total <- bind_rows(groupA,groupB)
group_total
groupA <-data.frame(id=c(1,2,3,4,5),
mid_jumsu=c(77,56,99,100,99))
groupB <- data.frame(id=c(6,7,8,9,10),
mid_jumsu=c(77,56,99,100,99))
group_total <- bind_rows(groupA,groupB)
group_total
group_total <- bind_rows(groupA,groupB)
group_total
data(mpg)
library("ggplot")
library("ggplot2")
data(mpg)
head(mpg)
mympg <- data.frame(mpg)
head(mympg)
mympg %>%
group_by(class) %>%
summarise(cty_avg=mean(cty))
mpg
mympg %>%
group_by(class) %>%
summarise(cty_avg=mean(cty))
mympg %>%
group_by(class) %>%
summarise(cty_avg=mean(cty)) %>%
arrange(desc(cty_avg))
source('C:/iot/work/RWork/advanced/Filter_exam.R', encoding = 'UTF-8', echo=TRUE)
mympg %>%
group_by(manufacturer) %>%
summarise(hwy_avg=mean(hwy)) %>%
mympg %>%
group_by(manufacturer) %>%
summarise(hwy_avg=mean(hwy))
mympg %>%
group_by(manufacturer) %>%
summarise(hwy_avg=mean(hwy)) %>%
head(n=3)
mympg %>%
group_by(manufacturer) %>%
summarise(hwy_avg=mean(hwy)) %>%
arrange(desc(cty_avg))
mympg %>%
group_by(manufacturer) %>%
summarise(hwy_avg=mean(hwy)) %>%
arrange(desc(hwy_avg))
mympg %>%
group_by(manufacturer) %>%
summarise(hwy_avg=mean(hwy)) %>%
arrange(desc(hwy_avg))
head(n=3)
mympg %>%
group_by(manufacturer) %>%
summarise(hwy_avg=mean(hwy)) %>%
arrange(desc(hwy_avg)) %>%
head(n=3)
mympg %>%
group_by(manufacturer) %>%
summarise(compact_num = sum(class="compact"))
mympg %>%
group_by(manufacturer) %>%
summarise(compact_num = sum(mympg$class="compact")) %>%
arrange(desc(compact_num))
mympg %>%
group_by(manufacturer) %>%
summarise(compact_num = sum(class=compact)) %>%
arrange(desc(compact_num))
mympg %>%
group_by(manufacturer) %>%
summarise(compact_num = sum(class="compact")) %>%
arrange(desc(compact_num))
mympg %>%
filter(class=="compact") %>%
group_by(manufacturer) %>%
arrange(desc(compact_num))
source('C:/iot/work/RWork/advanced/Filter_exam.R', encoding = 'UTF-8', echo=TRUE)
group_by(manufacturer) %>%
arrange(desc(class))
mympg %>%
filter(class=="compact")
group_by(manufacturer) %>%
arrange(desc(class))
mympg %>%
filter(class=="compact")%>%
group_by(manufacturer) %>%
arrange(desc(class))
mympg %>%
filter(class=="compact")%>%
group_by(manufacturer) %>%
arrange(desc(class))
mympg %>%
filter(class=="compact")%>%
summarise(sum(manufacturer)) %>%
arrange(desc(class))
mympg %>%
filter(class=="compact")%>%
group_by(manufacturer) %>%
summarise(sum(manufacturer)) %>%
arrange(desc(class))
mympg %>%
filter(class=="compact")%>%
group_by(manufacturer) %>%
arrange(desc(class))
mympg %>%
filter(class=="compact")%>%
group_by(manufacturer) %>%
arrange(desc(class))
mympg %>%
group_by(manufacturer) %>%
summarise(compact_num = sum(class=="compact")) %>%
arrange(desc(compact_num))
mympg %>%
filter(class=="compact")%>%
group_by(manufacturer) %>%
arrange(desc(class))
mympg %>%
group_by(manufacturer) %>%
summarise(compact_num = sum(class=="compact")) %>%
arrange(desc(compact_num))
library("ggplot2")
data(mpg)
head(mpg)
mympg <- data.frame(mpg)
head(mympg)
mympg %>%
group_by(class) %>%
summarise(cty_avg=mean(cty))
mympg %>%
group_by(class) %>%
summarise(cty_avg=mean(cty)) %>%
arrange(desc(cty_avg))
# hwy평균이 가장 높은 회사 세 곳을 출력하세요.
mympg %>%
group_by(manufacturer) %>%
summarise(hwy_avg=mean(hwy)) %>%
arrange(desc(hwy_avg)) %>%
head(n=3)
mympg %>%
group_by(manufacturer) %>%
summarise(compact_num = sum(class=="compact")) %>%
arrange(desc(compact_num))
mympg <- data.frame(mpg)
mympg
data(mpg)
head(mpg)
mympg <- data.frame(mpg)
mympg
head(mympg)
mympg %>%
group_by(class) %>%
summarise(cty_avg=mean(cty))
library("ggplot2")
data(mpg)
head(mpg)
mympg <- data.frame(mpg)
mympg
head(mympg)
mympg %>%
group_by(class) %>%
summarise(cty_avg=mean(cty))
mympg %>%
group_by(class) %>%
summarise(cty_avg=mean(cty)) %>%
arrange(desc(cty_avg))
mympg %>%
group_by(manufacturer) %>%
summarise(hwy_avg=mean(hwy)) %>%
arrange(desc(hwy_avg)) %>%
head(n=3)
mympg %>%
group_by(manufacturer) %>%
summarise(compact_num = sum(class=="compact")) %>%
arrange(desc(compact_num))
