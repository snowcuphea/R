sqrt(X <- 9) #x라는변수로 활용
x
sqrt(x <- 9) #x라는변수로 활용
x
? c
myvector <- c(100,200,300)
myvector
myve
myvector <- c(100,200,300)
myvector
myvector[1]
my
myvector[2]
myvector[3]
myvector1 <- c(100,200,300)
myvector1
myvector1[1]
myvector1[2]
myvector1[3]
myvector2 <- c(10,20,30)
myvector1
myvector1 <- c(100,200,300)
myvector1
myvector1[1]
myvector1[2]
myvector1[3]
myvector2 <- c(10,20,30)
myvector1
myvector2 <- c(10,20,30
myvector2 <- c(10,20,30)
myvector1
myvector2
myvector1 + 20
myvector2 * 2
myvector1+myvector2
myteｄ
mytext <- c("java","R","hadoop","android")
mytext[1]
mytext[c(1,2)] #벡터의 1번요소와 2번요소만 출력
mytext[c(1:3)] #1번~3번까지의 요소 선택
1:3
1:100
mytext[-1]
mytext[-1] # 1번요소 제외한 나머지
mytext[0]
mytext[c(-1,-3)]
mytext[c(-1:-3)]
mytext[-c(1:3)]
#TRUE와 FALSE를 이용해서 작업하기
mytext[c(T,T,F,F)] #T == True, F == False
mytext[mytext=="java"]
numlist <- 1:100
numlist
numlist %% 2 == 0 # %%가 나머지 구하기
numlist
numlist[numlist%%2==0] #벡터 안 짝수구하기
numlist[numlist%%2==1] #벡터 안 홀수구하기
numlist2 <- seq(1,10)
numlist2
? seq
numlist2 <- seq(1,10,my=2)
numlist2 <- seq(1,10,by=2)
numlist2
v1 <- c(70,80,90,100)
names(v1) #names는 벡터의 이름을출력력
names(v1) <- c("국어","수학","영어","자바")
v1
length(v1)
mean(v1)
max(v1)
min(v1) #최소값값
mytext <- c("java","R","hadoop","android")
mytext[1]
mytext[1,2] #matrix에 사용하므로 벡터에서 쓸 수 없다.
mytext[c(1,2)] #벡터의 1번요소와 2번요소만 출력
mytext[c(1,3)]
mytext[c(1:3)] #1번~3번까지의 요소 선택
1:3 # 자동으로 1부터 3까지의 벡터 만들어줌
1:100 #자동으로 1부터 100까지의 벡터 만들어줌
mytext[-1] # 1번요소 제외한 나머지
mytext[c(-1,-3)] # 1번요소, 3번요소 제외한 나머지
mytext[c(-1:-3)] #1번요소부터 3번요소 제외한 나머지
mytext[-c(1:3)] #mytext[c(-1:-3)]와 같은 표현
#TRUE와 FALSE를 이용해서 작업하기
mytext[c(T,T,F,F)] #T == True, F == False. #TRUE자리에 있는 것만 출력
mytext[mytext=="java"] #조건을 만족하는 요소
numlist <- 1:100
numlist
numlist %% 2 == 0 # %%가 나머지 구하기
numlist
numlist[numlist%%2==0] #벡터 안 짝수구하기
numlist[numlist%%2==1] #벡터 안 홀수구하기
numlist2 <- seq(1,10)
numlist2 <- seq(1,10,by=2)
numlist2
v1 <- c(70,80,90,100)
names(v1) #names는 벡터의 이름을 출력
names(v1) <- c("국어","수학","영어","자바")
v1
length(v1) #요소의 갯수를 리턴
mean(v1) # 평균 리턴
max(v1) #최대값
min(v1) #최소값
#matrix는 행렬
matrix(1:15)
#? matrix
mymat1 <- matrix(1:15,ncol=3)
mymat1
mymat1 <- matrix(1:15,ncol=3,byrow = T)
mymat1
mymat1[2,2]
mymat1[3,3]
mymat1[1,c(1:3)]
mymat1[1,] #1행의 모든 열
mymat[,1] #1열의 모든 값
mymat1[1,] #1행의 모든 열
mymat1[,1] #1열의 모든 값
#1행과 3행을 뺀 데이터
mymat1[-c(1,3),]
#미니실습1 - 2행부터 4행까지 출력. (단, 2번 3번 컬럼만 )
mymat1(c(2:4),c(2:3))
#미니실습1 - 2행부터 4행까지 출력. (단, 2번 3번 컬럼만 )
mymat1[c(2:4),c(2:3)]
mymat1[c(2:4),-1]
#미니실습1 - 2행부터 4행까지 출력. (단, 2번 3번 컬럼만 )
mymat1[2:4,c(2,3)]
addmymat1 <- cbind(mymat1,c(1,11,11,1111))
addmymat1
#rbind :
addmymat2 <-cbind(mymat1,r(1,111))
#rbind :
addmymat2 <-cbind(mymat1,c(1,111))
addmymat2
addmymat1 <- cbind(mymat1,c(1,11,11,1111))
addmymat1
addmymat2 <-rbind(mymat1,c(1,111))
addmymat2
mymat1
colnames(mymat1) <- c("a","b","c")
mymat1
mymat1
rownames(mymat1) <- c("r1","r2","r3","r4","r5")
mymat1
rmat <- matrix(c(80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90),ncol=4,byrow=T)
rmat
colnames(rmat) <- c("국어","영어","과학","수학")
rownames(rmat) <- c("kim","jang","hong","jang")
rmat
avg_name <- matrix(mean(rmat[1,]))
avg_name
avg_name <-matrix(mean(rmat[1,]),mean(rmat[2,]),mean(rmat[3,]),mean(rmat[4,]))
avg_name
avg_name <- matrix(mean(rmat[1,]))
avg_name
avg_name <-matrix(mean(rmat[1,],mean(rmat[2,]),mean(rmat[3,]),mean(rmat[4,])))
avg_name
avg_name <-matrix(mean(rmat[1,],mean(rmat[2,]),mean(rmat[3,]),mean(rmat[4,])),ncol=4,byrow=T)
avg_name
rmat <- matrix(c(80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90),ncol=4,byrow=T)
rmat
colnames(rmat) <- c("국어","영어","과학","수학")
rownames(rmat) <- c("kim","jang","hong","jang")
rmat
avg_name <-matrix(mean(rmat[1,],mean(rmat[2,]),mean(rmat[3,]),mean(rmat[4,])),ncol=4,byrow=T)
avg_name
avg_name <-matrix(mean(rmat[1,]),mean(rmat[2,]),mean(rmat[3,]),mean(rmat[4,]),ncol=4,byrow=T)
avg_name
rmat <- matrix(c(80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90),ncol=4,byrow=T)
rmat
colnames(rmat) <- c("국어","영어","과학","수학")
rownames(rmat) <- c("kim","jang","hong","jang")
rmat
avg_name <-matrix(mean(rmat[1,]),mean(rmat[2,]),mean(rmat[3,]),mean(rmat[4,]),ncol=4,byrow=T)
avg_name
avg_name <-c(mean(rmat[1,]),mean(rmat[2,]),mean(rmat[3,]),mean(rmat[4,]))
avg_name
avg_name <-c(mean(rmat[,1]),mean(rmat[,2]),mean(rmat[,3]),mean(rmat[,4]))
avg_name
avg_name <-c(mean(rmat[1,]),mean(rmat[2,]),mean(rmat[3,]),mean(rmat[4,]))
avg_name
avg_subject <-c(mean(rmat[,1]),mean(rmat[,2]),mean(rmat[,3]),mean(rmat[,4]))
avg_subject
rmat <- matrix(c(80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90),ncol=4,byrow=T)
rmat
colnames(rmat) <- c("국어","영어","과학","수학")
rownames(rmat) <- c("kim","jang","hong","jang")
rmat
avg_name <-c(mean(rmat[1,]),mean(rmat[2,]),mean(rmat[3,]),mean(rmat[4,]))
avg_name
avg_subject <-c(mean(rmat[,1]),mean(rmat[,2]),mean(rmat[,3]),mean(rmat[,4]))
avg_subject
dataframeMat1 <- matrix(1:15,ncol =3, byrow=T)
dataframeMat1
dataframeMat2 <- data.frame(dataframeMat1)
dataframeMat2
dataframeMat1 <- matrix(1:15,ncol =3, byrow=T)
dataframeMat1
mydataframe <- data.frame(dataframeMat1)
mydataframe
dataframeMat[,1]
dataframeMat1[,1]
mydataframe[,1]
#matrix로 정의된 데이터를 dataframe으로 변경하여 작업하는 경우가 많음
#Matrix의 1열만 char타입으로 변경
as.character(dataframeMat1[,1])
#matrix로 정의된 데이터를 dataframe으로 변경하여 작업하는 경우가 많음
#Matrix의 1열만 char타입으로 변경
dataframeMat1[,1] <- as.character(dataframeMat1[,1])
dataframeMat1
#이렇게 하면 1열만 바뀌는게 아니라, 전체가 다 바뀌어있다.
#Matrix는 한 타입으로만 선언해야 하므로, 한 열의 타입을 변경해도 모든 데이터의 타입이 변경된다.
#하지만 dataframe은 여러 타입 적용이 가능하다.
mydataframe[,1] <- as.character(dataframeMat1[,1])
mydataframe
#str함수는 dataframe 내부의 데이터형을 볼 수 있는 함수
str(mydataframe)
#이렇게 하면 1열만 바뀌는게 아니라, 전체가 다 바뀌어있다.
#Matrix는 한 타입으로만 선언해야 하므로, 한 열의 타입을 변경해도 모든 데이터의 타입이 변경된다.
#하지만 dataframe은 여러 타입을 적용할 수 있다.
mydataframe[,1] <- as.character(mydataframe[.1])
#str함수는 dataframe 내부의 데이터형을 볼 수 있는 함수
str(mydataframe)
#이렇게 하면 1열만 바뀌는게 아니라, 전체가 다 바뀌어있다.
#Matrix는 한 타입으로만 선언해야 하므로, 한 열의 타입을 변경해도 모든 데이터의 타입이 변경된다.
#하지만 dataframe은 여러 타입을 적용할 수 있다.
mydataframe[,1] <- as.character(mydataframe[,1])
#str함수는 dataframe 내부의 데이터형을 볼 수 있는 함수
str(mydataframe)
mydataframe
dataframeMat1 <- matrix(1:15,ncol =3, byrow=T)
dataframeMat1
mydataframe <- data.frame(dataframeMat1)
mydataframe
dataframeMat1[,1]
mydataframe[,1]
#Matrix의 1열만 char타입으로 변경
dataframeMat1[,1] <- as.character(dataframeMat1[,1])
dataframeMat1
mydataframe[,1] <- as.character(mydataframe[,1])
str(mydataframe)
mydataframe$X1 #$를 이용해서 열의 이름을 접근할 수 있다.
mydataframe$X2
mydataframe$X3
mydataframe$x4 <-col4
#dataframe에 열을 추가
col4 <- c(1,1,1,1,1)
mydataframe$x4 <-col4
mydataframe
#필요한 곳에서 dataframe을 다시 matrix로 변환
dataframeMat2 <- as.matrix(mydataframe)
dataframeMat2
#dataframe만들기 - 1.matrix를 dataframe으로 변환
#2.벡터를 여러 개 만들어서 dataframe을 작성
eng <- c(100,99,90)
math <- c(100,99,100)
mydf1 <- data.frame(eng,math)
mydf1
mean(mydf1$eng)
mean(mydf1$math)
#3. dataframe을 직접 정의
mydf2 <- data.frame(eng=c(100,100,100),
math=c(90,90,90))
mydf2
m <-matrix(1:15,ncol=3, byrow=T)
m
t(m)
m
m <- t(m)
m
d <- data.frame(m)
d
d <- t(d)
d
shop <- data.frame(c("사과","딸기","수박"),c(1800,1500,3000),c(24,38,13))
shop
colnames(shop) <-c("제품","가격","판매량")
shop
shop <- data.frame(c(1800,1500,3000),c(24,38,13))
shop <- data.frame(c(1800,1500,3000),c(24,38,13))
shop
colnames(shop) <-c("제품","가격","판매량")
shop <- data.frame(c("사과","딸기","수박"),c(1800,1500,3000),c(24,38,13))
colnames(shop) <-c("제품","가격","판매량")
mean(shop$판매량)
mean(shop$가격)
shop <- data.frame(c("사과","딸기","수박"),c(1800,1500,3000),c(24,38,13))
shop
colnames(shop) <-c("제품","가격","판매량")
shop
mean(shop$가격)
mean(shop$판매량)
num <-88
if(num>=90){
print("합격")
}else{
print("불합")
}
num <-88
if(num>=90){
print("합격")
}else{
print("불합")
}
num <-88
if(num>=90){
print("합격")
}else{
print("다시")
}
num <-88
if(num>=90){
print("합격")
}else if(num>=80){
print("다시")
}else{
print("과락")
}
num <-88
if(num>=90){
print("합격")
}else if(num>=80){
print("다시")
}else{
print("과락")
}
myv <- c(1:10)
myv <- c(1:10)
for (i in myv) {
print(i)
}
myv <- c(1:10)
for (i in myv) {
i
}
myv <- c(1:10)
for (i in myv) {
print(i)
}
sum <- 0
for(i in myv){
sum <- c(sum,i)
}
sum <- 0
for(i in myv){
sum <- c(sum,i)
}
print(sum)
#1부터 10까지 합 구하기
sum <- 0
for(i in myv){
sum <- c(sum+i)
}
print(sum)
#1부터 10까지합 구하기 - ver2
myv2 <- c(1:100)
sum(myv2)
#csv는 기본패키지로 사용가능
#csv를 읽기
mdf <- read.csv("csv_exam.csv")
mdf
mdf[2,]
#dataframe에서 조건에 만족하는 데이터를 조회
m <- matrix(1:20,ncol=4)
#dataframe에서 조건에 만족하는 데이터를 조회
m <- matrix(1:20,ncol=4)
m
d <- data.frame(m)
d
myresult <- d[d$X3>=13,]
myresult
#조건에 만족하는 데이터를 result.csv로 저장
write.csv(myresult,file="result.csv")
source('C:/iot/work/RWork/csvtest.R', encoding = 'UTF-8', echo=TRUE)
mdf <- read.csv("csv_exam.csv")
mdf
mycsv <- read.csv("csv_exam.csv")
mycsv
csvresult <- mycsv[mycsv$science>=80,]
csvresult
source('C:/iot/work/RWork/csvtest.R', encoding = 'UTF-8', echo=TRUE)
csvresult$mytotal <- sum(csvresult$math+csvresult$english+csvresult$science)
csvresult$myavg <-mean(csvresult$math,csvresult$english,csvresult$science)
csvresult$mytotal <- sum(csvresult$math+csvresult$english+csvresult$science)
csvresult
csvresult$mytotal <- 0
csvresult$myavg <-0
csvresult
result <- mycsv[mycsv$science>=80,]
result
result$mytotal <- (result$math+result$english+result$science)
result
result$myavg <-(result$mytotal/3)
result
result$myavg <-(mean(myresult[,4]:myresult[,6]))
result
source('C:/iot/work/RWork/matrix.R', encoding = 'UTF-8', echo=TRUE)
source('C:/iot/work/RWork/matrix.R', encoding = 'UTF-8', echo=TRUE)
rmat <- matrix(c(80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90),ncol=4,byrow=T)
rmat
colnames(rmat) <- c("국어","영어","과학","수학")
rownames(rmat) <- c("kim","jang","hong","jang")
rmat
avg_name <-c(mean(rmat[1,]),mean(rmat[2,]),mean(rmat[3,]),mean(rmat[4,]))
avg_name
avg_subject <-c(mean(rmat[,1]),mean(rmat[,2]),mean(rmat[,3]),mean(rmat[,4]))
avg_subject
mycsv <- read.csv("csv_exam.csv")
mycsv
result <- mycsv[mycsv$science>=80,]
result
result$mytotal <- (result$math+result$english+result$science)
result$myavg <-(result$math+result$english+result$science)/3
result
result$myavg <-mean(result$math,result$english,result$science)
result$myavg <-mean(c(result$math,result$english,result$science))
result
result$mytotal <- sum(result$math,result$english,result$science)
result
result$mytotal <- sum(c(result$math,result$english,result$science))
result
result$mytotal <-(result$math+result$english+result$science)
result$mytotal <-(result$math+result$english+result$science)
result
result$mytotal <-(result$math+result$english+result$science)
result$myavg <-result$mytotalmytotal/3
result$mytotal <-(result$math+result$english+result$science)
result$myavg <-result$mytotal/3
result
write.csv (result,file="csv_exam_result.csv")
for(i in result[,1]){
print(i)
}
mycsv <- read.csv("csv_exam.csv")
mycsv
result <- mycsv[mycsv$science>=80,]
result
k <- 1
for(i in result[,1]){
k <- k+1
if(i==result[k,1]){
result$mytotal <- sum(result[k,3:5] )
}
}
result
k <- 1
for(i in result[,1]){
k <- k+1
# if(i==result[k,1]){
result$mytotal <- sum(result[k,3:5] )
# }
}
result
k <- 1
for(i in result[,1]){
k <- k+1
# if(i==result[k,1]){
result[k,6] <- sum(result[k,3:5] )
# }
}
result
k <- 0
for(i in result[,1]){
k <- k+1
# if(i==result[k,1]){
result[k,6] <- sum(result[k,3:5] )
# }
}
k <- 0
for(i in result[,1]){
k <- k+1
# if(i==result[k,1]){
result[k,6] <- sum(result[k,3:5] )
# }
}
result
result <- mycsv[mycsv$science>=80,]
result
k <- 0
for(i in result[,1]){
k <- k+1
# if(i==result[k,1]){
result[k,6] <- sum(result[k,3:5] )
# }
}
result
mycsv <- read.csv("csv_exam.csv")
mycsv
result <- mycsv[mycsv$science>=80,]
result
result$mytotal <-(result$math+result$english+result$science)
result$myavg <-result$mytotal/length(result$math:result$science)
result$mytotal <-(result$math+result$english+result$science)
result
mycsv <- read.csv("csv_exam.csv")
mycsv
result <- mycsv[mycsv$science>=80,]
result
result$mytotal <-(result$math+result$english+result$science)
result$myavg <-result$mytotal/3
result
result$myavg <-mean(result$mytotal[1])
result$myavg <-mean(result$mytotal[1])
result
mydata <- read.csv("csv_exam.csv")
mydata
mydataResult <- mydata[]
mydataResult <- mydata[mydata$science>=80,]
mydataResult
mydataResult$mytotal <- as.numeric(mydataResult$math+mydataResult$english+mydataResult$science)
mydataResult
mydataResult$myavg <- as.numeric(mydataResult$mytotal/3)
mydataResult
